Here’s a revised and clearer version of your notes on **Communication Protocols**, with improved sentence structure and relevant examples. You can directly copy and update this on GitHub:

---

## 🛰️ Communication Protocols

### 🌐 HTTP (HyperText Transfer Protocol)

* Used for transferring data over the web (e.g., web browsing, API calls).
* Operates over a **TCP connection**.
* Each new HTTP request opens a new TCP connection (unless HTTP/1.1 or HTTP/2 keep-alive is used).
* **Example**: When you open Amazon.com, your browser makes multiple HTTP requests to fetch HTML, CSS, images, etc.

### 🔁 TCP (Transmission Control Protocol)

* A **connection-oriented** protocol.
* Ensures reliable delivery of data — no packets are lost, duplicated, or delivered out of order.
* Performs error checking and guarantees message delivery.
* **Example**: Downloading a file or sending an email via SMTP.

### 🚀 UDP (User Datagram Protocol)

* A **connectionless** protocol — does not establish a connection before sending data.
* No handshaking, no guarantee of delivery or packet order.
* Faster but less reliable than TCP.
* **Example**: Video conferencing, online gaming, live streaming — where speed is more important than perfect accuracy.

### ⚡ HTTP/3 (based on QUIC)

* Uses **UDP** instead of TCP.
* Supports **multiplexed streams** in a single connection.
* Offers **faster performance** through:

  * Header compression (reduces size of metadata).
  * Better handling of **network congestion** and packet loss.
* **Example**: YouTube, Google services use HTTP/3 for faster video and content delivery.

### 🔐 HTTPS (Secure HTTP)

* An extension of HTTP that uses **SSL/TLS over TCP**.
* Encrypts the data being transferred, ensuring **data privacy and security**.
* Prevents eavesdropping and tampering by third parties.
* **Example**: Online banking websites or any site with a login (like Gmail or Amazon).

### 🔄 WebSocket

* Initiated as an **HTTP request**, then upgraded to a **WebSocket connection**.
* Enables **full-duplex communication** — both server and client can send messages anytime.
* Ideal for real-time applications.
* **Example**: Live chat apps, online multiplayer games, stock price updates.

### ✉️ SMTP (Simple Mail Transfer Protocol)

* Protocol used for **sending emails**.
* Works over **TCP** to ensure reliable delivery.
* Usually used by email servers.
* **Example**: Gmail sending an email to Outlook via SMTP.

### 📁 FTP (File Transfer Protocol)

* Used for **uploading and downloading files** over the internet.
* Can work in active or passive modes depending on how connections are established.
* Typically uses **TCP** to ensure reliable file transfers.
* **Example**: Uploading website files to a hosting server using FileZilla.

---

Let me know if you want these formatted in Markdown with code blocks or diagrams for GitHub.
